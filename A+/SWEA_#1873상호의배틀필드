"""
1
3 7
***....
*-..#**
#<.****
23
SURSSSSUSLSRSSSURRDSRDS
"""
"""
접근
1. 전차의 첫위치와 바라보는 방향을 파악
2. ORDER명령대로 처리할 수 있는 함수를 만든다
3. ORDER명령대로 처리한다.
"""
def tank(arg, x, y, d):
    if arg == 'U' and x-1 >= 0:
        if MAP[x-1][y] == '.':
            MAP[x][y] = '.'
            MAP[x-1][y] = '^'
        else:
            MAP[x][y] = '^'
        return MAP
    elif arg == 'D' and x+1 < H:
        if MAP[x+1][y] == '.':
            MAP[x][y] = '.'
            MAP[x+1][y] = 'v'
        else:
            MAP[x][y] = 'v'
        return MAP
    elif arg == 'L' and y-1 >= 0:
        if MAP[x][y-1] == '.':
            MAP[x][y] = '.'
            MAP[x][y-1] = '<'
        else:
            MAP[x][y] = '<'
        return MAP
    elif arg == 'R' and y+1 < W:
        if MAP[x][y+1] == '.':
            MAP[x][y] = '.'
            MAP[x][y+1] = '>'
        else:
            MAP[x][y] = '>'
        return MAP
    elif arg == 'S':
        dfs(x, y, d)

def find():
    for i in range(H):
        for j in range(W):
            if MAP[i][j] == '^' or MAP[i][j] == 'v' or MAP[i][j] == '<' or MAP[i][j] == '>':
                return (i, j, MAP[i][j])

def dfs(r, c, d):
    if r < 0 or r > H-1 or c < 0 or c > W-1:
        return
    if d == '^':
        if r-1 >= 0 and MAP[r-1][c] == '*': #벽돌
            MAP[r-1][c] = '.'
            return
        elif r-1 >= 0 and MAP[r-1][c] == '#': #강철
            return
        elif r-1 >= 0 and MAP[r-1][c] == '-': #물
            dfs(r-1, c, d)
        elif r-1 >= 0 and MAP[r-1][c] == '.': #평지
            dfs(r-1, c, d)
    elif d == 'v':
        if r+1 < H and MAP[r+1][c] == '*': #벽돌
            MAP[r+1][c] = '.'
            return
        elif r+1 < H and MAP[r+1][c] == '#': #강철
            return
        elif r+1 < H and MAP[r+1][c] == '-': #물
            dfs(r+1, c, d)
        elif r+1 < H and MAP[r+1][c] == '.': #평지
            dfs(r+1, c, d)
    elif d == '<':
        if c-1 >= 0 and MAP[r][c-1] == '*': #벽돌
            MAP[r][c-1] = '.'
            return
        elif c-1 >= 0 and MAP[r][c-1] == '#': #강철
            return
        elif c-1 >= 0 and MAP[r][c-1] == '-': #물
            dfs(r, c-1, d)
        elif c-1 >= 0 and MAP[r][c-1] == '.': #평지
            dfs(r, c-1, d)
    elif d == '>':
        if c+1 < W and MAP[r][c+1] == '*': #벽돌
            MAP[r][c+1] = '.'
            return
        elif c+1 < W and MAP[r][c+1] == '#': #강철
            return
        elif c+1 < W and MAP[r][c+1] == '-': #물
            dfs(r, c+1, d)
        elif c+1 < W and MAP[r][c+1] == '.': #평지
            dfs(r, c+1, d)


T = int(input())
for tc in range(1, T+1):
    H, W = map(int, input().split())
    MAP = [list(input()) for _ in range(H)]
    N = int(input())
    ORDER = list(input())

    for i in range(len(ORDER)):
        x, y, d = find()
        tank(ORDER[i], x, y, d)

    print('#{}'.format(tc), end=' ')
    for row in MAP:
        print(''.join(row))
